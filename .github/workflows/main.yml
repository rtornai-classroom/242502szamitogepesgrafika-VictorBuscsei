name: Beadando_cicd

on:
  push:
    branches: [ main ]

permissions:
  pages: write
  id-token: write

jobs:
# Web build steps
  web:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install GLM headers
        run: |
          sudo apt-get update
          sudo apt-get install -y libglm-dev

      - name: Set up Emscripten
        uses: mymindstorm/setup-emsdk@v14  

      - name: Build WebAssembly
        run: |
          for dir in 01_beadando 02_beadando; do
            emcc $dir/Source.cpp \
              -O2 \
              -s LEGACY_GL_EMULATION=1 \
              -s USE_GLFW=3 \
              -o $dir/index.html
          done
        # LEGACY_GL_EMULATION needed for glBegin and glEnd calls in the browser

      - name: Upload pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./  

  deploy-pages:
    needs: web
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

# Windows build steps with artifacts
  native:
    runs-on: windows-latest
    strategy:
      matrix:
        project: [01_beadando, 02_beadando]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Clone and bootstrap vcpkg
        shell: pwsh
        run: |
          # Clone official vcpkg repo
          git clone https://github.com/microsoft/vcpkg.git vcpkg
          # Bootstrap vcpkg (builds vcpkg.exe)
          .\vcpkg\bootstrap-vcpkg.bat
          # Install required libraries
          .\vcpkg\vcpkg.exe install glew:x64-windows glfw3:x64-windows glm:x64-windows

      - name: Generate CMakeLists.txt
        shell: pwsh
        env:
          PROJ: ${{ matrix.project }}
        run: |
          $cm = @"
          cmake_minimum_required(VERSION 3.15)
          project($env:PROJ)
          set(CMAKE_TOOLCHAIN_FILE "${CMAKE_SOURCE_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake")
          find_package(glfw3 CONFIG REQUIRED)
          find_package(GLEW REQUIRED)
          find_package(glm CONFIG REQUIRED)
          add_executable($env:PROJ $env:PROJ/Source.cpp)
          target_include_directories($env:PROJ PRIVATE $env:PROJ)
          target_link_libraries($env:PROJ PRIVATE glfw GLEW::GLEW glm opengl32)
          "@
          $cm | Set-Content -LiteralPath CMakeLists.txt -Encoding UTF8

      - name: Configure and build with CMake
        shell: pwsh
        env:
          PROJ: ${{ matrix.project }}
        run: |
          cmake -S . -B build `
            -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release

      - name: Package executables
        shell: pwsh
        env:
          PROJ: ${{ matrix.project }}
        run: |
          New-Item -ItemType Directory -Force -Path artifact
          Copy-Item -Path build/Release/$env:PROJ.exe -Destination artifact/
          Compress-Archive -Path artifact/*.exe -DestinationPath native-exes.zip

      - name: Upload native executables ZIP
        uses: actions/upload-artifact@v4
        with:
          name: native-executables
          path: native-exes.zip